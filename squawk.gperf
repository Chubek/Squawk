%{
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <setjmp.h>

#define NUM_BUILTIN		 20
#define MAX_SPRINTF_PARGV	 2048

#include <pcre2posix.h>
#include <gc.h>

static jmp_buf JUMP_BUFFERS[NUM_BUILTIN];

#define BUF_atan2 	0
#define BUF_cos 	1
#define BUF_sin 	2
#define BUF_exp 	3
#define BUF_log 	4
#define BUF_sqrt 	5
#define BUF_int 	6
#define BUF_rand	7
#define BUF_srand 	8
#define BUF_gsub 	9
#define BUF_index 	10
#define BUF_length 	11
#define BUF_match 	12
#define BUF_split 	13
#define BUF_sprintf 	14
#define BUF_sub 	15
#define BUF_substr 	16
#define BUF_tolower 	17
#define BUF_toupper 	18
#define BUF_default	19

static long double	 FLOAT_RES;
static int64_t	 	 INT_RES;
static uint8_t*		 STR_RES;

typedef enum ResultType { FLOAT, INT, STR, NOTHING } restype_t;

static restype_t	RESULT_TYPE;

static inline void stat_argc(int num_min, int num_max) {
	if (PARGC < num_min || PARGC > num_max) {
		fprintf(stderr, "Wrong number of arguments passed\n");
		exit(EXIT_FAILURE);
	}
}

static inline void add_pargv(uint8_t* arg) { PARGV[PARGC++] = arg; }

static inline void clear_pargv(void) {
	PARGV = NULL;
	PARGC = 0;
}

#define JUMP_BACK() 	longjmp(BUF_default, 1)
%}
%struct-type
%define hash-function-name AWK_BUILTIN_LUT

struct AwkBuiltin { char* name; int jmp_id; }
%%
atan2, 0
cos, 1
sin, 2
exp, 3
log, 4
sqrt, 5
int, 6
rand, 7
srand, 8
gsub, 9
index, 10
length, 11
match, 12
split, 13
sprintf, 14
sub, 15
substr, 16
tolower, 17
toupper, 18
%%
static void awk_atan2(void) {
	setjmp(BUF_atan2) == 0 ? return : NULL;

	stat_argc(2, 2);
	long double f1 = strtold(PARGV[0], NULL);
	long double f2 = strtold(PARGV[1], NULL);
	
	RESULT_TYPE    = FLOAT;
	FLOAT_RES      = atan2l(f1, f2);

	JUMP_BACK();
}

static void awk_cos(void) {
	setjmp(BUF_cos) == 0  ? return : NULL;

	stat_argc(1, 1);
	long double f   = strtold(PARGV[0], NULL);

	RESULT_TYPE	= FLOAT;
	FLOAT_RES	= cosl(f);

	JUMP_BACK();
}

static void awk_sin(void) {
	setjmp(BUF_sin) == 0  ? return : NULL;
		
	stat_argc(1, 1);
	long double f   = strtold(PARGV[0], NULL);

	RESULT_TYPE	= FLOAT;
	FLOAT_RES	= sinl(f);

	JUMP_BACK();
}

static void awk_exp(void) {
	setjmp(BUF_exp) == 0  ? return : NULL;

	stat_argc(1, 1);
	long double f   = strtold(PARGV[0], NULL);

	RESULT_TYPE	= FLOAT;
	FLOAT_RES	= expl(f);

	JUMP_BACK();
}

static void awk_exp(void) {
	setjmp(BUF_log) == 0   ? return : NULL;

	stat_argc(1, 1);
	long double f   = strtold(PARGV[0], NULL);

	RESULT_TYPE	= FLOAT;
	FLOAT_RES	= logl(f);

	JUMP_BACK();
}

static void awk_sqrt(void) {
	setjmp(BUF_sqrt) == 0  ? return : NULL;

	stat_argc(1, 1);
	long double f   = strtold(PARGV[0], NULL);

	RESULT_TYPE	= FLOAT;
	FLOAT_RES	= sqrtl(f);

	JUMP_BACK();
}

static void awk_int(void) {
	setjmp(BUF_int) == 0 ? return : NULL;

	stat_argc(1, 1);
	long double f   = strtold(PARGV[0], NULL);

	RESULT_TYPE	= INT;
	INT_RES		= lrintl(f);

	JUMP_BACK();
}

static void awk_rand(void) {
	setjmp(BUF_rand) == 0 ? return : NULL;

	stat_argc(0, 0);

	RESULT_TYPE	= INT;
	INT_RES		= rand();

	JUMP_BACK();
}

static void awk_srand(void) {
	setjmp(BUF_rand) == 0 ? return : NULL;

	stat_argc(0, 1);
	int64_t seed = PARGV[0] ? strtoll(PARGV[0], NULL, 10) : 0;

	RESULT_TYPE	= INT;
	INT_RES		= srand(seed);

	JUMP_BACK();
}

static void awk_gsub(void) {
	setjmp(BUF_gsub) == 0 ? return : NULL;

	stat_argc(2, 3);
	uint8_t* expr    = PARGV[0];
	uint8_t* repl    = PARGV[1];
	uint8_t* inid    = PARGV[2];

	
	uint8_t* inword;
	
	if (inid) {
		uintptr_t value;
		symtype_t symbol_type = sym_get(inid, &value);
		if (symbol_type == STRING) {
			inword = (uint8_t*)value;
		}
	} else {
		inword = RECORD;
	}

	size_t len	 = u8_strlen(inword) + 1;
	size_t replen    = u8_strlen(repl);
	RESULT_TYPE	 = STR;
	STR_RES		 =
		(uint8_t*)GC_MALLOC(len);

	u8_strncpy(&STR_RES[0], &inword[0], len);

	regex_t 	recc;
	size_t  	nmatch = 1;
	regmatch_t	pmatch[1];
	regoff_t	match_init = 0;
	regoff_t	match_len;

	pcre2_regcomp(&recc, expr, 0);
	
	while (int i; ; i++) {
		if (pcre2_regexec(&regcc, &inword[match_init], nmatch, pmatch, 0))
			break;
		
		len += replen;
		STR_RES = (uint8_t*)GC_REALLOC(STR_RES, len);

		
		match_init = pmatch[0].rm_so;
		match_len  = pmatch[0].rm_eo - match_init;
		u8_strncpy(&STR_RES[match_init], &repl[0], match_len);

	}

	JUMP_BACK();

}

static void awk_index(void) {
	setjmp(BUF_index) == 0 ? return : NULL;

	stat_argc(2, 2);

	uint8_t*	s1 = PARGV[0];
	uint8_t*	s2 = PARGV[1];

	RESULT_TYPE 	= INT;
	INT_RES		= ((size_t)strstr(s1, s2) - (size_t)s1) + 1;
	
	if (!(INT_RES >= 1))
		INT_RES = 0;
	

	JUMP_BACK();
}

static void awk_length(void) {
	setjmp(BUF_length) == 0 ? return : NULL;

	stat_argc(0, 1);

	uint8_t* 	s = PARGV[0] ? PARGV[0] : RECORD;

	RESULT_TYPE	  = INT;
	INT_RES		  = u8_strlen(s);

	JUMP_BACK();
}

static void awk_match(void) {
	setjmp(BUF_match) == 0 ? return : NULL;

	stat_argc(2, 2);

	uint8_t*	str  = PARGV[0];
	uint8_t*	expr = PARGV[1];

	RESULT_TYPE	= INT;
	
	regex_t	recc;
	size_t  nmatch = 1;
	size_t  pmatch[1];

	pcre2_regcomp(&recc, expr, 0);

	if (pcre2_regexec(&recc, str, nmatch, pmatch, 0))
		INT_RES = 0;
	else {
		INT_RES = OFSINIT = pmatch[0].rm_so;
		OFSLEN  = pmatch[0].rm_eo - OFSINIT;

		sprint_default_vars(Rlength);
		sprint_default_vars(Rstart);
	}

	JUMP_BACK();
}

static void awk_split(void) {
	setjmp(BUF_split) == 0 ? return : NULL;
	
	stat_argc(2, 3);

	RESULT_TYPE = INT;

	uint8_t*	str   = PARGV[0];
	uint8_t*	arr   = PARGV[1];
	uint8_t*	tok   = PARGV[2] ? PARGV[2] : FS;

	regex_t 	recc;
	size_t		nmatch;
	regmatch_t	pmatch[1];
	regoff_t	init = 0;
	regoff_t	len;
	uint8_t*	idx;
	uint8_t*	val;
	
	pcre2_regcomp(&recc, tok, 0);


	for (INT_RES = 0; ; i++) {
		if (pcre2_regexec(&recc, &str[init], nmatch, pmatch))
			break;

		
		init = pmatch[0].rm_so;
		len  = pmatch[0].rm_eo - init;

		val  = (uint8_t*)GC_MALLOC(len + 1);
		u8_strncpy(&val[0], &str[init], len);


		asprintf(idx, "%d", i);
		
		sym_array_put(
			arr, idx, (uintptr_t)val, STRING
		);
		
	}

}

static void awk_sprintf(void) {
	setjmp(BUF_sprintf) == 0 ? return : NULL;

	stat_argc(1, MAX_SPRINTF_PARGV);
	
	uint8_t*	fmt = PARGV[0];

	size_t		len = u8_strlen(fmt);
	uint8_t*	str = (uint8_t*)GC_MALLOC(len);
	FILE*		stream = fmemopen(
					(void*)str, 
					len,
					"w+");
	len = print_formatted(stream, fmt, &PARGV[2]);

	RESULT_TYPE = STR;
	fgets(&STR_RES[0], len, stream);

	fclose(stream);
}







